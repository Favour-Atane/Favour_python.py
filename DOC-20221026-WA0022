{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**This notebook is an exercise in the [Data Visualization](https://www.kaggle.com/learn/data-visualization) course.  You can reference the tutorial at [this link](https://www.kaggle.com/alexisbcook/final-project).**\n\n---\n","metadata":{}},{"cell_type":"markdown","source":"Now it's time for you to demonstrate your new skills with a project of your own!\n\nIn this exercise, you will work with a dataset of your choosing.  Once you've selected a dataset, you'll design and create your own plot to tell interesting stories behind the data!\n\n## Setup\n\nRun the next cell to import and configure the Python libraries that you need to complete the exercise.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nprint(\"Setup Complete\")\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:33.730227Z","iopub.execute_input":"2022-10-26T10:52:33.730658Z","iopub.status.idle":"2022-10-26T10:52:33.739753Z","shell.execute_reply.started":"2022-10-26T10:52:33.730619Z","shell.execute_reply":"2022-10-26T10:52:33.738407Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport numpy as np\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:33.754065Z","iopub.execute_input":"2022-10-26T10:52:33.754858Z","iopub.status.idle":"2022-10-26T10:52:33.764812Z","shell.execute_reply.started":"2022-10-26T10:52:33.754820Z","shell.execute_reply":"2022-10-26T10:52:33.763370Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The questions below will give you feedback on your work. Run the following cell to set up the feedback system.","metadata":{}},{"cell_type":"code","source":"# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.data_viz_to_coder.ex7 import *\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:33.770139Z","iopub.execute_input":"2022-10-26T10:52:33.770516Z","iopub.status.idle":"2022-10-26T10:52:33.778078Z","shell.execute_reply.started":"2022-10-26T10:52:33.770485Z","shell.execute_reply":"2022-10-26T10:52:33.776941Z"},"trusted":true},"execution_count":67,"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}]},{"cell_type":"code","source":"from learntools.core import binder\nbinder.bind(globals())\nfrom learntools.data_viz_to_coder.ex7 import *\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:33.798447Z","iopub.execute_input":"2022-10-26T10:52:33.798845Z","iopub.status.idle":"2022-10-26T10:52:33.806006Z","shell.execute_reply.started":"2022-10-26T10:52:33.798813Z","shell.execute_reply":"2022-10-26T10:52:33.805031Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Step 1: Attach a dataset to the notebook\n\nBegin by selecting a CSV dataset from [Kaggle Datasets](https://www.kaggle.com/datasets).  If you're unsure how to do this, please revisit the instructions in the previous tutorial.\n\nOnce you have selected a dataset, click on the **[+ Add data]** option in the top right corner.  This will generate a pop-up window that you can use to search for your chosen dataset.  \n\n![ex6_search_dataset](https://i.imgur.com/cIIWPUS.png)\n\nOnce you have found the dataset, click on the **[Add]** button to attach it to the notebook.  You can check that it was successful by looking at the **Data** dropdown menu to the right of the notebook -- look for an **input** folder containing a subfolder that matches the name of the dataset.\n\n<center>\n<img src=\"https://i.imgur.com/nMYc1Nu.png\" width=30%><br/>\n</center>\n\nYou can click on the carat to the left of the name of the dataset to double-check that it contains a CSV file.  For instance, the image below shows that the example dataset contains two CSV files: (1) **dc-wikia-data.csv**, and (2) **marvel-wikia-data.csv**.\n\n<center>\n<img src=\"https://i.imgur.com/B4sJkVA.png\" width=30%><br/>\n</center>\n\nOnce you've uploaded a dataset with a CSV file, run the code cell below **without changes** to receive credit for your work!","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"../input/loans/loans.csv\")","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:33.823649Z","iopub.execute_input":"2022-10-26T10:52:33.824558Z","iopub.status.idle":"2022-10-26T10:52:33.911794Z","shell.execute_reply.started":"2022-10-26T10:52:33.824513Z","shell.execute_reply":"2022-10-26T10:52:33.910476Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"# Check for a dataset with a CSV file\nstep_1.check()","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:33.915006Z","iopub.execute_input":"2022-10-26T10:52:33.915399Z","iopub.status.idle":"2022-10-26T10:52:33.925839Z","shell.execute_reply.started":"2022-10-26T10:52:33.915366Z","shell.execute_reply":"2022-10-26T10:52:33.924461Z"},"trusted":true},"execution_count":70,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_AttachData\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct: \n","text/markdown":"<span style=\"color:#33cc33\">Correct:</span> \n\n"},"metadata":{}}]},{"cell_type":"markdown","source":"## Step 2: Specify the filepath\n\nNow that the dataset is attached to the notebook, you can find its filepath.  To do this, begin by clicking on the CSV file you'd like to use.  This will open the CSV file in a tab below the notebook.  You can find the filepath towards the top of this new tab.  \n\n![ex6_filepath](https://i.imgur.com/fgXQV47.png)\n\nAfter you find the filepath corresponding to your dataset, fill it in as the value for `my_filepath` in the code cell below, and run the code cell to check that you've provided a valid filepath.  For instance, in the case of this example dataset, we would set\n```\nmy_filepath = \"../input/fivethirtyeight-comic-characters-dataset/dc-wikia-data.csv\"\n```  \nNote that **you must enclose the filepath in quotation marks**; otherwise, the code will return an error.\n\nOnce you've entered the filepath, you can close the tab below the notebook by clicking on the **[X]** at the top of the tab.","metadata":{}},{"cell_type":"code","source":"# Fill in the line below: Specify the path of the CSV file to read\nmy_filepath = \"../input/loans/loans.csv\"\n\n# Check for a valid filepath to a CSV file in a dataset\nstep_2.check()","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:33.927247Z","iopub.execute_input":"2022-10-26T10:52:33.928292Z","iopub.status.idle":"2022-10-26T10:52:33.939697Z","shell.execute_reply.started":"2022-10-26T10:52:33.928240Z","shell.execute_reply":"2022-10-26T10:52:33.938371Z"},"trusted":true},"execution_count":71,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_Filepath\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct: \n","text/markdown":"<span style=\"color:#33cc33\">Correct:</span> \n\n"},"metadata":{}}]},{"cell_type":"markdown","source":"## Step 3: Load the data\n\nUse the next code cell to load your data file into `my_data`.  Use the filepath that you specified in the previous step.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fill in the line below: Read the file into a variable my_data\nmy_data = pd.read_csv(\"../input/loans/loans.csv\")\n\n# Check that a dataset has been uploaded into my_data\nstep_3.check()","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:33.943481Z","iopub.execute_input":"2022-10-26T10:52:33.944072Z","iopub.status.idle":"2022-10-26T10:52:34.029312Z","shell.execute_reply.started":"2022-10-26T10:52:33.944024Z","shell.execute_reply":"2022-10-26T10:52:34.028077Z"},"trusted":true},"execution_count":72,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_LoadData\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct: \n","text/markdown":"<span style=\"color:#33cc33\">Correct:</span> \n\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**_After the code cell above is marked correct_**, run the code cell below without changes to view the first five rows of the data.","metadata":{}},{"cell_type":"code","source":"# Print the first five rows of the data\nmy_data.head(10)","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:52:34.030603Z","iopub.execute_input":"2022-10-26T10:52:34.030948Z","iopub.status.idle":"2022-10-26T10:52:34.050325Z","shell.execute_reply.started":"2022-10-26T10:52:34.030899Z","shell.execute_reply":"2022-10-26T10:52:34.049016Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"   id_number  loan_amount  lender_count  status           funded_date  \\\n0     736066         4825            60  funded  2014-08-03T17:51:50Z   \n1     743090          975            34  funded  2014-08-18T09:10:54Z   \n2     743120          950            25  funded  2014-08-09T17:46:35Z   \n3     743121          825            28  funded  2014-08-24T17:00:38Z   \n4     743124          725            21  funded  2014-08-25T03:24:54Z   \n5     743125          725            27  funded  2014-08-18T23:08:00Z   \n6     743130          725            27  funded  2014-08-19T12:14:49Z   \n7     743134          525            14  funded  2014-07-28T06:20:44Z   \n8     743207          950            35  funded  2014-08-26T14:24:08Z   \n9     743228          500            10  funded  2014-08-01T01:54:34Z   \n\n   funded_amount  repayment_term location_country_code    sector description  \\\n0           4825               8                    BJ    Retail         NaN   \n1            975              12                    BJ      Food         NaN   \n2            950              14                    BJ  Services         NaN   \n3            825              14                    BJ    Retail         NaN   \n4            725              13                    BJ    Retail         NaN   \n5            725              13                    BJ    Retail         NaN   \n6            725              13                    BJ    Retail         NaN   \n7            525              13                    BJ  Services         NaN   \n8            950              14                    BJ    Retail         NaN   \n9            500              10                    BJ      Food         NaN   \n\n   use  \n0  NaN  \n1  NaN  \n2  NaN  \n3  NaN  \n4  NaN  \n5  NaN  \n6  NaN  \n7  NaN  \n8  NaN  \n9  NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id_number</th>\n      <th>loan_amount</th>\n      <th>lender_count</th>\n      <th>status</th>\n      <th>funded_date</th>\n      <th>funded_amount</th>\n      <th>repayment_term</th>\n      <th>location_country_code</th>\n      <th>sector</th>\n      <th>description</th>\n      <th>use</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>736066</td>\n      <td>4825</td>\n      <td>60</td>\n      <td>funded</td>\n      <td>2014-08-03T17:51:50Z</td>\n      <td>4825</td>\n      <td>8</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>743090</td>\n      <td>975</td>\n      <td>34</td>\n      <td>funded</td>\n      <td>2014-08-18T09:10:54Z</td>\n      <td>975</td>\n      <td>12</td>\n      <td>BJ</td>\n      <td>Food</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>743120</td>\n      <td>950</td>\n      <td>25</td>\n      <td>funded</td>\n      <td>2014-08-09T17:46:35Z</td>\n      <td>950</td>\n      <td>14</td>\n      <td>BJ</td>\n      <td>Services</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>743121</td>\n      <td>825</td>\n      <td>28</td>\n      <td>funded</td>\n      <td>2014-08-24T17:00:38Z</td>\n      <td>825</td>\n      <td>14</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>743124</td>\n      <td>725</td>\n      <td>21</td>\n      <td>funded</td>\n      <td>2014-08-25T03:24:54Z</td>\n      <td>725</td>\n      <td>13</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>743125</td>\n      <td>725</td>\n      <td>27</td>\n      <td>funded</td>\n      <td>2014-08-18T23:08:00Z</td>\n      <td>725</td>\n      <td>13</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>743130</td>\n      <td>725</td>\n      <td>27</td>\n      <td>funded</td>\n      <td>2014-08-19T12:14:49Z</td>\n      <td>725</td>\n      <td>13</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>743134</td>\n      <td>525</td>\n      <td>14</td>\n      <td>funded</td>\n      <td>2014-07-28T06:20:44Z</td>\n      <td>525</td>\n      <td>13</td>\n      <td>BJ</td>\n      <td>Services</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>743207</td>\n      <td>950</td>\n      <td>35</td>\n      <td>funded</td>\n      <td>2014-08-26T14:24:08Z</td>\n      <td>950</td>\n      <td>14</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>743228</td>\n      <td>500</td>\n      <td>10</td>\n      <td>funded</td>\n      <td>2014-08-01T01:54:34Z</td>\n      <td>500</td>\n      <td>10</td>\n      <td>BJ</td>\n      <td>Food</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df1 = my_data[0:10]\ndf1","metadata":{"execution":{"iopub.status.busy":"2022-10-26T10:58:52.560251Z","iopub.execute_input":"2022-10-26T10:58:52.560644Z","iopub.status.idle":"2022-10-26T10:58:52.580193Z","shell.execute_reply.started":"2022-10-26T10:58:52.560612Z","shell.execute_reply":"2022-10-26T10:58:52.578659Z"},"trusted":true},"execution_count":85,"outputs":[{"execution_count":85,"output_type":"execute_result","data":{"text/plain":"   id_number  loan_amount  lender_count  status           funded_date  \\\n0     736066         4825            60  funded  2014-08-03T17:51:50Z   \n1     743090          975            34  funded  2014-08-18T09:10:54Z   \n2     743120          950            25  funded  2014-08-09T17:46:35Z   \n3     743121          825            28  funded  2014-08-24T17:00:38Z   \n4     743124          725            21  funded  2014-08-25T03:24:54Z   \n5     743125          725            27  funded  2014-08-18T23:08:00Z   \n6     743130          725            27  funded  2014-08-19T12:14:49Z   \n7     743134          525            14  funded  2014-07-28T06:20:44Z   \n8     743207          950            35  funded  2014-08-26T14:24:08Z   \n9     743228          500            10  funded  2014-08-01T01:54:34Z   \n\n   funded_amount  repayment_term location_country_code    sector description  \\\n0           4825               8                    BJ    Retail         NaN   \n1            975              12                    BJ      Food         NaN   \n2            950              14                    BJ  Services         NaN   \n3            825              14                    BJ    Retail         NaN   \n4            725              13                    BJ    Retail         NaN   \n5            725              13                    BJ    Retail         NaN   \n6            725              13                    BJ    Retail         NaN   \n7            525              13                    BJ  Services         NaN   \n8            950              14                    BJ    Retail         NaN   \n9            500              10                    BJ      Food         NaN   \n\n   use  \n0  NaN  \n1  NaN  \n2  NaN  \n3  NaN  \n4  NaN  \n5  NaN  \n6  NaN  \n7  NaN  \n8  NaN  \n9  NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id_number</th>\n      <th>loan_amount</th>\n      <th>lender_count</th>\n      <th>status</th>\n      <th>funded_date</th>\n      <th>funded_amount</th>\n      <th>repayment_term</th>\n      <th>location_country_code</th>\n      <th>sector</th>\n      <th>description</th>\n      <th>use</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>736066</td>\n      <td>4825</td>\n      <td>60</td>\n      <td>funded</td>\n      <td>2014-08-03T17:51:50Z</td>\n      <td>4825</td>\n      <td>8</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>743090</td>\n      <td>975</td>\n      <td>34</td>\n      <td>funded</td>\n      <td>2014-08-18T09:10:54Z</td>\n      <td>975</td>\n      <td>12</td>\n      <td>BJ</td>\n      <td>Food</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>743120</td>\n      <td>950</td>\n      <td>25</td>\n      <td>funded</td>\n      <td>2014-08-09T17:46:35Z</td>\n      <td>950</td>\n      <td>14</td>\n      <td>BJ</td>\n      <td>Services</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>743121</td>\n      <td>825</td>\n      <td>28</td>\n      <td>funded</td>\n      <td>2014-08-24T17:00:38Z</td>\n      <td>825</td>\n      <td>14</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>743124</td>\n      <td>725</td>\n      <td>21</td>\n      <td>funded</td>\n      <td>2014-08-25T03:24:54Z</td>\n      <td>725</td>\n      <td>13</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>743125</td>\n      <td>725</td>\n      <td>27</td>\n      <td>funded</td>\n      <td>2014-08-18T23:08:00Z</td>\n      <td>725</td>\n      <td>13</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>743130</td>\n      <td>725</td>\n      <td>27</td>\n      <td>funded</td>\n      <td>2014-08-19T12:14:49Z</td>\n      <td>725</td>\n      <td>13</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>743134</td>\n      <td>525</td>\n      <td>14</td>\n      <td>funded</td>\n      <td>2014-07-28T06:20:44Z</td>\n      <td>525</td>\n      <td>13</td>\n      <td>BJ</td>\n      <td>Services</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>743207</td>\n      <td>950</td>\n      <td>35</td>\n      <td>funded</td>\n      <td>2014-08-26T14:24:08Z</td>\n      <td>950</td>\n      <td>14</td>\n      <td>BJ</td>\n      <td>Retail</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>743228</td>\n      <td>500</td>\n      <td>10</td>\n      <td>funded</td>\n      <td>2014-08-01T01:54:34Z</td>\n      <td>500</td>\n      <td>10</td>\n      <td>BJ</td>\n      <td>Food</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"## Step 4: Visualize the data\n\nUse the next code cell to create a figure that tells a story behind your dataset.  You can use any chart type (_line chart, bar chart, heatmap, etc_) of your choosing!","metadata":{}},{"cell_type":"code","source":"# Create a plot\ndf= sns.regplot(x =\"loan_amount\", \n                 y =\"funded_amount\", data=my_data)# Your code here\n\n# Check that a figure appears below\nstep_4.check()","metadata":{"execution":{"iopub.status.busy":"2022-10-26T11:10:59.215869Z","iopub.execute_input":"2022-10-26T11:10:59.216361Z","iopub.status.idle":"2022-10-26T11:11:00.008851Z","shell.execute_reply.started":"2022-10-26T11:10:59.216324Z","shell.execute_reply":"2022-10-26T11:11:00.007766Z"},"trusted":true},"execution_count":102,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"4_CreatePlot\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct: \n","text/markdown":"<span style=\"color:#33cc33\">Correct:</span> \n\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"df2 = plt.distplot(x = \"funded_amount\", ","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"df2 = sns.lineplot(x=\"funded_amount\", y=\"lender_count\", data = my_data)","metadata":{"execution":{"iopub.status.busy":"2022-10-26T11:11:07.443736Z","iopub.execute_input":"2022-10-26T11:11:07.444865Z","iopub.status.idle":"2022-10-26T11:11:13.483504Z","shell.execute_reply.started":"2022-10-26T11:11:07.444814Z","shell.execute_reply":"2022-10-26T11:11:13.481903Z"},"trusted":true},"execution_count":103,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"def missing_num(x):\n    return sum(x.isna())\n\nprint('Missing values per column')\n#applying our fxn by column\n#check sum of missing value by column, and get the columns where \n#the sum is not zero\n\nprint(my_data.apply(missing_num, axis = 0).where(lambda x: x!=0).dropna())","metadata":{"execution":{"iopub.status.busy":"2022-10-26T11:11:20.788135Z","iopub.execute_input":"2022-10-26T11:11:20.789523Z","iopub.status.idle":"2022-10-26T11:11:20.812448Z","shell.execute_reply.started":"2022-10-26T11:11:20.789450Z","shell.execute_reply":"2022-10-26T11:11:20.811097Z"},"trusted":true},"execution_count":104,"outputs":[{"name":"stdout","text":"Missing values per column\nfunded_date              937.0\nlocation_country_code     17.0\ndescription              342.0\nuse                      342.0\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"sns.boxplot(x= \"loan_amount\", y=\"funded_amount\", data= df1)","metadata":{"execution":{"iopub.status.busy":"2022-10-26T11:14:06.529665Z","iopub.execute_input":"2022-10-26T11:14:06.530139Z","iopub.status.idle":"2022-10-26T11:14:06.823217Z","shell.execute_reply.started":"2022-10-26T11:14:06.530101Z","shell.execute_reply":"2022-10-26T11:14:06.822009Z"},"trusted":true},"execution_count":109,"outputs":[{"execution_count":109,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='loan_amount', ylabel='funded_amount'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Keep going\n\nLearn how to use your skills after completing the micro-course to create data visualizations in a **[final tutorial](https://www.kaggle.com/alexisbcook/creating-your-own-notebooks)**.","metadata":{}},{"cell_type":"markdown","source":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/data-visualization/discussion) to chat with other learners.*","metadata":{}}]}